
@article{zhu_programming_nodate,
	title = {A Programming Model for Sustainable Software},
	abstract = {This paper presents a novel energy-aware and temperature-aware programming model with ﬁrst-class support for sustainability. A program written in the new language, named Eco, may adaptively adjusts its own behaviors to stay on a given (energy or temperature) budget, avoiding both deﬁcit that would lead to battery drain or {CPU} overheating, and surplus that could have been used to improve the quality of results. Sustainability management in Eco is captured as a form of supply and demand matching, and the language runtime consistently maintains the equilibrium between supply and demand. Among the efforts of energy-adaptive and temperature-adaptive systems, Eco is distinctive in its role in bridging the programmer and the underlying system, and in particular, bringing both programmer knowledge and application-speciﬁc traits into energy optimization. Through a number of intuitive programming abstractions, Eco reduces challenging issues in this domain — such as workload characterization and decision making in adaptation —to simple programming tasks, ultimately offering ﬁne-grained, programmable, and declarative sustainability to energy-efﬁcient computing. Eco is an minimal extension to Java, and has been implemented as an open-source compiler. We validate the usefulness of Eco by upgrading real-world Java applications with energy awareness and temperature awareness.},
	pages = {11},
	author = {Zhu, Haitao Steve and Lin, Chaoren and Liu, Yu David},
	langid = {english},
	file = {10.1.1.697.5127.pdf:/Users/osagieosahenagharu/Downloads/10.1.1.697.5127.pdf:application/pdf},
}

@book{carullo_implementing_2020,
	location = {Berkeley, {CA}},
	title = {Implementing Effective Code Reviews: How to Build and Maintain Clean Code},
	isbn = {978-1-4842-6161-3 978-1-4842-6162-0},
	url = {http://link.springer.com/10.1007/978-1-4842-6162-0},
	shorttitle = {Implementing Effective Code Reviews},
	publisher = {Apress},
	author = {Carullo, Giuliana},
	urldate = {2021-03-18},
	date = {2020},
	langid = {english},
	doi = {10.1007/978-1-4842-6162-0},
	file = {10.1007@978-1-4842-6162-0.pdf:/Users/osagieosahenagharu/Downloads/10.1007@978-1-4842-6162-0.pdf:application/pdf},
}

@article{jayaraman_planning_nodate,
	title = {Planning sustainable development through a scenario-based stochastic goal programming model},
	abstract = {Most real-world optimization problems involve numerous conﬂicting criteria, imprecise information estimates and goals, thus the stochastic goal programming method offers an analytical framework to model and solve such problems. In this paper, we develop a stochastic goal programming model with satisfaction function that integrates optimal resource (labor) allocation to simultaneously satisfy conﬂicting criteria related to economic development, energy consumption, workforce allocation, and greenhouse gas emissions. We validate the model using sectorial data obtained from diverse sources on vital economic sectors for the United Arab Emirates. The results offer signiﬁcant insights to decision makers for strategic planning decisions and investment allocations towards achieving long term sustainable development goals.},
	pages = {17},
	author = {Jayaraman, Raja},
	langid = {english},
	file = {jayaraman2016.pdf:/Users/osagieosahenagharu/Downloads/jayaraman2016.pdf:application/pdf},
}

@inproceedings{shenoy_green_2011,
	location = {Hyderabad, India},
	title = {Green software development model: An approach towards sustainable software development},
	isbn = {978-1-4577-1109-1 978-1-4577-1110-7 978-1-4577-1108-4},
	url = {http://ieeexplore.ieee.org/document/6139638/},
	doi = {10.1109/INDCON.2011.6139638},
	shorttitle = {Green software development model},
	pages = {1--6},
	booktitle = {2011 Annual {IEEE} India Conference},
	publisher = {{IEEE}},
	author = {Shenoy, Sanath. S. and Eeratta, Raghavendra},
	urldate = {2021-03-18},
	date = {2011-12},
	langid = {english},
}

@article{liukku_clean_nodate,
	title = {Clean Code: Analysing game code using agile programming practices},
	pages = {51},
	author = {Liukku, Oskari},
	langid = {english},
	file = {Liukku - Clean Code Analysing game code using agile progra.pdf:/Users/osagieosahenagharu/Zotero/storage/ZJWJ5ZCW/Liukku - Clean Code Analysing game code using agile progra.pdf:application/pdf},
}

@article{latte_clean_nodate,
	title = {Clean Code: On the Use of Practices and Tools to Produce Maintainable Code for Long-Living Software},
	abstract = {Maintaining a long-living software system is substantially related to the quality of the code the system is built from. In this experience report we describe how a set of practices and tools has been established and used on the early stages of a project. The approach is based on Clean Code and the use of well known static code analysis tools. The tools and practices have been used with an immediate effect of having cleaner code that is easier to understand in the long term. Additional attention is given to the cultural aspect that is involved in reaching a mindset that will allow to set and uphold code quality standards. Reaching a common understanding is a team effort that requires ”leaving one’s comfort zone“. Finding common ground can signiﬁcantly decide about failure or success in creating maintainable code.},
	pages = {4},
	journaltitle = {Living Systems},
	author = {Latte, Bjorn and Henning, Soren and Wojcieszak, Maik},
	langid = {english},
	file = {Latte et al. - Clean Code On the Use of Practices and Tools to P.pdf:/Users/osagieosahenagharu/Zotero/storage/SHS9GAB3/Latte et al. - Clean Code On the Use of Practices and Tools to P.pdf:application/pdf},
}

@incollection{kong_chapter_2021,
	title = {Chapter 1 - Python Basics},
	isbn = {978-0-12-819549-9},
	url = {https://www.sciencedirect.com/science/article/pii/B9780128195499000105},
	abstract = {This chapter will get you started with Python, using it as a calculator, managing Python packages, and helping you familiarize yourself with the Jupyter notebook. As you will see, Python has a great set of packages with expansive sets of functionalities. At the end of this chapter, you should be able to execute commands in Python, install and manage the Python packages in Jupyter notebook, and use Python's basic mathematical functions.},
	pages = {3--25},
	booktitle = {Python Programming and Numerical Methods},
	publisher = {Academic Press},
	author = {Kong, Qingkai and Siauw, Timmy and Bayen, Alexandre M.},
	editor = {Kong, Qingkai and Siauw, Timmy and Bayen, Alexandre M.},
	urldate = {2021-03-18},
	date = {2021-01-01},
	langid = {english},
	doi = {10.1016/B978-0-12-819549-9.00010-5},
	keywords = {Jupyter notebook, logical expressions, logical operators, packages, Python setup},
	file = {ScienceDirect Snapshot:/Users/osagieosahenagharu/Zotero/storage/JEVFWYYF/B9780128195499000105.html:text/html},
}

@book{pieterse_automated_2013,
	title = {Automated Assessment of Programming Assignments},
	abstract = {This is a position paper in which I argue that massive open online programming courses can benefit by the application of automated assessment of programming assignments. I gathered success factors and identified concerns related to automatic assessment through the analysis of experiences other researchers have reported when designing and using automated assessment of programming assignments and interpret their potential applicability in the context of massive open online courses ({MOOCs}). In this paper I explain the design of our own assessment software and discuss our experience of using it in relation to the above-mentioned factors and concerns. My reflection on this experience can inform {MOOC} designers when having to make decisions regarding the use of automatic assessment of programming assignments.},
	pagetotal = {45},
	author = {Pieterse, Vreda},
	date = {2013-04-04},
	note = {Pages: 56},
}

@article{demir_clean_nodate,
	title = {Clean C++ Sustainable Software Development Patterns and Best Practices with C++ 17},
	url = {https://www.academia.edu/41171592/Clean_C_Sustainable_Software_Development_Patterns_and_Best_Practices_with_C_17},
	author = {Demir, Cemal},
	urldate = {2021-03-18},
	langid = {english},
	file = {Snapshot:/Users/osagieosahenagharu/Zotero/storage/GXC3EIV6/Clean_C_Sustainable_Software_Development_Patterns_and_Best_Practices_with_C_17.html:text/html},
}

@online{Sergey_unit_2017,
	title = {Unit Tests, How to Write Testable Code and Why it Matters},
	url = {https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters},
	abstract = {Writing unit tests can be tough, but it shouldn't be. If your tests are hard to write, you probably have problems elsewhere. Untestable code is a sign of deeper design problems.

In this article, Toptal developer Sergey Kolodiy delivers a comprehensive breakdown of what makes code hard to test, and how to write be...},
	titleaddon = {Toptal Engineering Blog},
	urldate = {2021-03-19},
	langid = {english},
	file = {Snapshot:/Users/osagieosahenagharu/Zotero/storage/3NTS5PSI/how-to-write-testable-code-and-why-it-matters.html:text/html},
}